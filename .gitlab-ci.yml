# GitLab CI/CD Pipeline for Laravel 11 Project
# This pipeline runs Unit and Feature tests with MySQL database

# Define the stages
stages:
  - prepare
  - test
  - quality

# Variables used across all jobs
variables:
  MYSQL_ROOT_PASSWORD: root
  MYSQL_DATABASE: laravel_test
  MYSQL_USER: laravel
  MYSQL_PASSWORD: laravel
  DB_HOST: mysql
  DB_DATABASE: laravel_test
  DB_USERNAME: laravel
  DB_PASSWORD: laravel

# Cache configuration for faster builds
cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - vendor/
    - .composer-cache/

# Base job template for all PHP jobs
.php_base: &php_base
  image: php:8.2-cli
  before_script:
    # Install system dependencies
    - apt-get update -qq && apt-get install -y -qq git curl libmcrypt-dev libjpeg-dev libpng-dev libfreetype6-dev libbz2-dev libzip-dev unzip
    
    # Install PHP extensions
    - docker-php-ext-install pdo_mysql zip bcmath gd
    
    # Install Composer
    - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    
    # Set Composer cache directory
    - export COMPOSER_CACHE_DIR=.composer-cache
    
    # Install dependencies
    - composer install --prefer-dist --no-ansi --no-interaction --no-progress --no-scripts --optimize-autoloader
    
    # Set up Laravel environment
    - cp .env.example .env
    - php artisan key:generate --ansi
    
    # Create testing environment file
    - |
      cat > .env.testing << EOF
      APP_NAME=Laravel
      APP_ENV=testing
      APP_KEY=$(php artisan --no-ansi key:generate --show)
      APP_DEBUG=true
      APP_URL=http://localhost
      
      DB_CONNECTION=mysql
      DB_HOST=${DB_HOST}
      DB_PORT=3306
      DB_DATABASE=${DB_DATABASE}
      DB_USERNAME=${DB_USERNAME}
      DB_PASSWORD=${DB_PASSWORD}
      
      CACHE_DRIVER=array
      SESSION_DRIVER=array
      QUEUE_CONNECTION=sync
      MAIL_MAILER=array
      EOF
    
    - php artisan config:clear
    - php artisan cache:clear

# Prepare stage - Install dependencies and prepare environment
prepare:dependencies:
  <<: *php_base
  stage: prepare
  script:
    - echo "Dependencies installed and environment prepared"
  artifacts:
    paths:
      - vendor/
      - .env
    expire_in: 1 hour

# Unit Tests - Fast tests without database
unit_tests:
  <<: *php_base
  stage: test
  dependencies:
    - prepare:dependencies
  script:
    # Set up testing environment
    - php artisan config:clear --env=testing
    - php artisan cache:clear --env=testing
    
    # Run Unit tests only
    - vendor/bin/phpunit --testsuite=Unit --log-junit=unit-test-results.xml --coverage-text --coverage-clover=unit-coverage.xml || true
    
    # Check if tests passed
    - vendor/bin/phpunit --testsuite=Unit
  artifacts:
    when: always
    reports:
      junit: unit-test-results.xml
      coverage_report:
        coverage_format: cobertura
        path: unit-coverage.xml
    paths:
      - unit-test-results.xml
      - unit-coverage.xml
    expire_in: 1 week

# Feature Tests - Tests that require database
feature_tests:
  <<: *php_base
  stage: test
  services:
    - mysql:8.0
  dependencies:
    - prepare:dependencies
  script:
    # Wait for MySQL to be ready
    - until mysql -h mysql -u $DB_USERNAME -p$DB_PASSWORD -e "SELECT 1"; do sleep 1; done
    
    # Set up test database and environment
    - php artisan config:clear --env=testing
    - php artisan cache:clear --env=testing
    - php artisan migrate --force --env=testing
    
    # Run Feature tests
    - vendor/bin/phpunit --testsuite=Feature --log-junit=feature-test-results.xml --coverage-text --coverage-clover=feature-coverage.xml || true
    
    # Check if tests passed
    - vendor/bin/phpunit --testsuite=Feature
  artifacts:
    when: always
    reports:
      junit: feature-test-results.xml
      coverage_report:
        coverage_format: cobertura
        path: feature-coverage.xml
    paths:
      - feature-test-results.xml
      - feature-coverage.xml
    expire_in: 1 week

# All Tests - Run complete test suite (optional - for comprehensive coverage)
all_tests:
  <<: *php_base
  stage: test
  services:
    - mysql:8.0
  dependencies:
    - prepare:dependencies
  script:
    # Wait for MySQL to be ready
    - until mysql -h mysql -u $DB_USERNAME -p$DB_PASSWORD -e "SELECT 1"; do sleep 1; done
    
    # Set up test database and environment
    - php artisan config:clear --env=testing
    - php artisan cache:clear --env=testing
    - php artisan migrate --force --env=testing
    
    # Run all tests with coverage
    - vendor/bin/phpunit --log-junit=all-test-results.xml --coverage-html=coverage-html --coverage-text --coverage-clover=all-coverage.xml || true
    
    # Check if tests passed
    - vendor/bin/phpunit
  artifacts:
    when: always
    reports:
      junit: all-test-results.xml
      coverage_report:
        coverage_format: cobertura
        path: all-coverage.xml
    paths:
      - coverage-html/
      - all-test-results.xml
      - all-coverage.xml
    expire_in: 1 week
  # This job is manual to avoid running redundant tests
  when: manual
  allow_failure: true

# Code Quality - PHP CodeSniffer
code_quality:
  <<: *php_base
  stage: quality
  dependencies:
    - prepare:dependencies
  script:
    # Run PHP CodeSniffer
    - vendor/bin/phpcs --standard=PSR12 --report=junit --report-file=phpcs-report.xml app/ || true
    - vendor/bin/phpcs --standard=PSR12 app/
  artifacts:
    when: always
    reports:
      junit: phpcs-report.xml
    paths:
      - phpcs-report.xml
    expire_in: 1 week
  allow_failure: true

# Laravel Code Analysis (optional)
laravel_analysis:
  <<: *php_base
  stage: quality
  dependencies:
    - prepare:dependencies
  script:
    # Check for Laravel best practices
    - php artisan route:list
    - php artisan config:cache
    - php artisan view:cache
    - echo "Laravel configuration analysis completed"
  allow_failure: true
  when: manual