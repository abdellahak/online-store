# GitLab CI/CD Configuration for Laravel Project
image: php:8.2-fpm

# Cache dependencies for faster builds
cache:
  paths:
    - vendor/
    - node_modules/

# Define stages
stages:
  - prepare
  - test

# Variables
variables:
  MYSQL_ROOT_PASSWORD: root
  MYSQL_DATABASE: laravel_test
  MYSQL_USER: laravel
  MYSQL_PASSWORD: laravel
  DB_HOST: mysql
  DB_CONNECTION: mysql

# Services (MySQL for testing)
services:
  - mysql:8.0

# Before script - Install dependencies and set up environment
before_script:
  # Update system packages
  - apt-get update -qq && apt-get install -y -qq git curl zip unzip

  # Install PHP extensions
  - docker-php-ext-install pdo pdo_mysql

  # Install Composer
  - curl -sS https://getcomposer.org/installer | php
  - mv composer.phar /usr/local/bin/composer

  # Set up environment
  - cp .env.example .env
  - sed -i "s/DB_CONNECTION=mysql/DB_CONNECTION=mysql/" .env
  - sed -i "s/DB_HOST=127.0.0.1/DB_HOST=mysql/" .env
  - sed -i "s/DB_DATABASE=laravel/DB_DATABASE=laravel_test/" .env
  - sed -i "s/DB_USERNAME=root/DB_USERNAME=laravel/" .env
  - sed -i "s/DB_PASSWORD=/DB_PASSWORD=laravel/" .env
  - sed -i "s/APP_ENV=local/APP_ENV=testing/" .env

  # Install Composer dependencies
  - composer install --prefer-dist --no-ansi --no-interaction --no-progress --no-scripts

  # Generate application key
  - php artisan key:generate

  # Wait for MySQL to be ready
  - sleep 10

# Job: Install Dependencies
install_dependencies:
  stage: prepare
  script:
    - echo "Dependencies installed successfully"
  artifacts:
    paths:
      - vendor/
    expire_in: 1 hour

# Job: Run PHPUnit Tests
phpunit_tests:
  stage: test
  dependencies:
    - install_dependencies
  script:
    # Run database migrations
    - php artisan migrate --force

    # Run PHPUnit tests
    - vendor/bin/phpunit --configuration phpunit.xml --coverage-text --colors=never
  artifacts:
    reports:
      junit: storage/logs/junit.xml
    paths:
      - storage/logs/
    expire_in: 1 week
  coverage: '/^\s*Lines:\s*\d+.\d+\%/'

# Job: Code Style Check (PHP_CodeSniffer)
code_style:
  stage: test
  dependencies:
    - install_dependencies
  script:
    # Run PHP CodeSniffer for code style checking
    - vendor/bin/phpcs --standard=PSR12 app/ --report=junit --report-file=storage/logs/phpcs.xml
  artifacts:
    reports:
      junit: storage/logs/phpcs.xml
    expire_in: 1 week
  allow_failure: true

# Job: Feature Tests
feature_tests:
  stage: test
  dependencies:
    - install_dependencies
  script:
    # Run database migrations
    - php artisan migrate --force

    # Run only feature tests
    - vendor/bin/phpunit tests/Feature/ --colors=never
  artifacts:
    paths:
      - storage/logs/
    expire_in: 1 week

# Job: Unit Tests
unit_tests:
  stage: test
  dependencies:
    - install_dependencies
  script:
    # Run only unit tests
    - vendor/bin/phpunit tests/Unit/ --colors=never
  artifacts:
    paths:
      - storage/logs/
    expire_in: 1 week

# Job: Laravel Artisan Commands Test
artisan_commands:
  stage: test
  dependencies:
    - install_dependencies
  script:
    # Run database migrations
    - php artisan migrate --force    # Test some basic artisan commands
    - php artisan route:list
    - php artisan config:cache
    - php artisan view:cache
  allow_failure: true
