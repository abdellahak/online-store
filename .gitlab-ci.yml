build:
  stage: build
  image: php:8.2
  before_script:
    - apt-get update -yqq
    - apt-get install -yqq git unzip libzip-dev libpng-dev libjpeg-dev libfreetype6-dev curl
    - docker-php-ext-configure gd --with-jpeg --with-freetype
    - docker-php-ext-install zip pdo_mysql gd
    - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
  script:
    - composer install --prefer-dist --no-ansi --no-interaction --no-progress --no-scripts
    - cp /usr/local/bin/composer ./composer.phar       
    - apt-get install -y nodejs npm
    - npm ci
    - npm run build
  artifacts:
    paths:
      - vendor/
      - node_modules/
      - public/build/
      - composer.phar              


test:
  stage: test
  image: php:8.2
  services:
    - name: mysql:5.7
      alias: mysql
  variables:
    MYSQL_DATABASE: OnlineStore
    MYSQL_ROOT_PASSWORD: root
    DB_HOST: mysql
    DB_PORT: 3306
    DB_DATABASE: OnlineStore
    DB_USERNAME: root
    DB_PASSWORD: root
    GIT_STRATEGY: clone
  needs:
    - job: build
      artifacts: true
  before_script:
    - apt-get update && apt-get install -y default-mysql-client libzip-dev curl libpng-dev libjpeg62-turbo-dev libfreetype6-dev
    - cp composer.phar /usr/local/bin/composer
    - chmod +x /usr/local/bin/composer
    - docker-php-ext-configure gd --with-jpeg --with-freetype
    - docker-php-ext-install pdo_mysql gd
    - cp .env.example .env
    - sed -i "s/DB_HOST=.*/DB_HOST=mysql/" .env
    - sed -i "s/DB_DATABASE=.*/DB_DATABASE=OnlineStore/" .env
    - sed -i "s/DB_USERNAME=.*/DB_USERNAME=root/" .env  
    - sed -i "s/DB_PASSWORD=.*/DB_PASSWORD=root/" .env
    - php artisan key:generate
    - php artisan config:clear
    - php artisan route:clear
    - php artisan cache:clear
    - php artisan view:clear
    - composer dump-autoload
    - |
      max_tries=30
      count=0
      until mysql -h mysql -u root -proot -e "SELECT 1" &> /dev/null
      do
        echo "Waiting for MySQL to be ready..."
        sleep 2
        count=$((count+1))
        if [ $count -gt $max_tries ]; then
          echo "MySQL connection timed out"
          exit 1
        fi
      done
      echo "MySQL is ready!"
  script:
    - echo "Listing controller files..."
    - find app/Http/Controllers -name "*.php" | sort
    - php artisan migrate --force --seed --no-interaction
    - php artisan test
