stages:
  - build
  - test

variables:
  MYSQL_DATABASE: laravel_test
  MYSQL_ROOT_PASSWORD: root
  MYSQL_USER: laravel
  MYSQL_PASSWORD: laravel

# Build job
build:
  stage: build
  image: php:8.2-fpm
  
  before_script:
    # Install system dependencies
    - apt-get update -qq && apt-get install -y -qq git curl libmcrypt-dev libjpeg-dev libpng-dev libfreetype6-dev libbz2-dev libzip-dev unzip
    
    # Install PHP extensions (including GD for phpoffice/phpspreadsheet)
    - docker-php-ext-configure gd --with-freetype --with-jpeg
    - docker-php-ext-install pdo_mysql zip bcmath gd
    
    # Install Composer
    - curl -sS https://getcomposer.org/installer | php
    - mv composer.phar /usr/local/bin/composer
    
  script:
    # Install dependencies
    - composer install --prefer-dist --no-ansi --no-interaction --no-progress --no-scripts
    
  artifacts:
    paths:
      - vendor/
    expire_in: 1 hour

# Test job
test:
  stage: test
  image: php:8.2-fpm
  
  services:
    - mysql:8.0
  variables:
    DB_HOST: mysql
    DB_DATABASE: laravel_test
    DB_USERNAME: laravel
    DB_PASSWORD: laravel
    
  before_script:
    # Install system dependencies
    - apt-get update -qq && apt-get install -y -qq git curl libmcrypt-dev libjpeg-dev libpng-dev libfreetype6-dev libbz2-dev libzip-dev unzip
    
    # Install PHP extensions (including GD for phpoffice/phpspreadsheet)
    - docker-php-ext-configure gd --with-freetype --with-jpeg
    - docker-php-ext-install pdo_mysql zip bcmath gd
    
    # Install Composer
    - curl -sS https://getcomposer.org/installer | php
    - mv composer.phar /usr/local/bin/composer
    
    # Set up environment
    - cp .env.example .env
    - php artisan key:generate
    - php artisan config:clear
    - php artisan cache:clear
    
    # Wait for MySQL to be ready and run migrations
    - php artisan migrate --force
    
  script:
    # Run PHPUnit tests
    - vendor/bin/phpunit --coverage-text --colors=never
    
    # Optional: Run PHP CodeSniffer for code quality
    - vendor/bin/phpcs --standard=phpcs.xml app/
    
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - storage/logs/
    expire_in: 1 week
    when: always
    
  dependencies:
    - build
